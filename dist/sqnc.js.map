{"version":3,"file":"sqnc.js","mappings":"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","sources":["webpack://sqnc/webpack/universalModuleDefinition","webpack://sqnc/./src/sqnc.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"sqnc\"] = factory();\n\telse\n\t\troot[\"sqnc\"] = factory();\n})(self, function() {\nreturn ","\"use strict\";\nexports.__esModule = true;\n/* global process */\nvar UTF16MAX = 65536;\nvar iteratorSupport = typeof Symbol === \"function\" && \"iterator\" in Symbol;\nvar asyncIteratorSupport = typeof Symbol === \"function\" && \"asyncIterator\" in Symbol;\nfunction stringToUTF16Array(val) {\n    return val.split(\"\").map(function (c) {\n        return c.charCodeAt(0);\n    });\n}\nfunction utf16ArrayToString(val) {\n    return String.fromCharCode.apply(null, val);\n}\nfunction utf16ArrayToDec(val) {\n    var res = 0;\n    var n = 0;\n    for (var i = val.length - 1; i >= 0; i--) {\n        res += val[i] * Math.pow(UTF16MAX, n);\n        n++;\n    }\n    return res;\n}\nfunction decToUTF16Array(val) {\n    var res = [];\n    var p;\n    while (val) {\n        p = val % UTF16MAX;\n        res.unshift(p);\n        val = Math.floor(val / UTF16MAX);\n    }\n    return res;\n}\nfunction delta(a, b) {\n    if (typeof a === \"string\") {\n        a = stringToUTF16Array(a);\n    }\n    if (typeof b === \"string\") {\n        b = stringToUTF16Array(b);\n    }\n    if (Array.isArray(a) && Array.isArray(b)) {\n        a = utf16ArrayToDec(a);\n        b = utf16ArrayToDec(b);\n    }\n    return Math.abs(a - b) + 1;\n}\nfunction compare(a, b) {\n    if (Array.isArray(a) && Array.isArray(b)) {\n        a = utf16ArrayToDec(a);\n        b = utf16ArrayToDec(b);\n    }\n    return a > b ? 1 : a < b ? -1 : 0;\n}\nfunction inc(val, count) {\n    count = count == null ? 1 : count;\n    if (Array.isArray(val)) {\n        return decToUTF16Array(utf16ArrayToDec(val) + count);\n    }\n    else {\n        return val + count;\n    }\n}\nfunction iterableToArray(iterable) {\n    var result = [];\n    var state = iterable.next();\n    while (!state.done) {\n        result.push(state.value);\n        state = iterable.next();\n    }\n    return result;\n}\nfunction SqncIterator(arg0, arg1, arg2, arg3) {\n    var iterator = this;\n    if (iteratorSupport) {\n        iterator[Symbol.iterator] = function () {\n            return iterator;\n        };\n    }\n    if (asyncIteratorSupport) {\n        iterator[Symbol.asyncIterator] = function () {\n            return {\n                next: iterator.nextAsync\n            };\n        };\n    }\n    var options;\n    if (typeof arg0 === \"object\" && arg0 != null) {\n        options = arg0;\n    }\n    else if (typeof arg0 === \"function\") {\n        options = { fn: arg0, count: arg1 };\n    }\n    else if (arg1 == null && arg2 == null && arg3 == null) {\n        options = { fill: arg0 };\n    }\n    else {\n        options = { from: arg0, to: arg1, step: arg2, count: arg3 };\n    }\n    var from = options.from == null ? 0 : options.from;\n    var to = options.to;\n    var step = options.step == null ? 1 : options.step;\n    var count = options.count;\n    var fn = options.fn;\n    var init = options.init;\n    var chars = options.chars || false;\n    if (typeof from === \"string\") {\n        from = stringToUTF16Array(from);\n        chars = true;\n    }\n    if (typeof to === \"string\") {\n        to = stringToUTF16Array(to);\n        chars = true;\n    }\n    if (from != null && to != null && step) {\n        step = (compare(from, to) > 0 ? -1 : 1) * Math.abs(step);\n        count = count == null ? Math.ceil(delta(from, to) / Math.abs(step)) : count;\n    }\n    Object.defineProperty(iterator, \"length\", {\n        get: function () {\n            return count;\n        }\n    });\n    function cloneOptions() {\n        var opt = {\n            from: from,\n            to: to,\n            step: step,\n            count: count,\n            fn: fn,\n            init: init,\n            chars: chars\n        };\n        if (\"fill\" in options) {\n            opt.fill = options.fill;\n        }\n        return opt;\n    }\n    var idx = 0;\n    var val = from;\n    var state = {};\n    var nextIteration;\n    if (\"fill\" in options) {\n        nextIteration = function () {\n            state = { done: false, value: options.fill };\n        };\n    }\n    else if (typeof fn === \"function\") {\n        var fnState_1;\n        var endCallback_1 = function () {\n            state = { done: true };\n        };\n        nextIteration = function (isAsync) {\n            state = { done: false };\n            if (idx === 0) {\n                fnState_1 = typeof init === \"function\" ? init() : {};\n            }\n            var value = fn(idx, fnState_1, endCallback_1);\n            if (isAsync) {\n                return Promise.resolve(value).then(function (value) {\n                    state.value = value;\n                    return state;\n                });\n            }\n            state.value = value;\n        };\n    }\n    else {\n        nextIteration = function () {\n            state = { done: false, value: chars ? utf16ArrayToString(val) : val };\n            val = inc(val, step);\n        };\n    }\n    iterator.instance = function (count) {\n        var options = cloneOptions();\n        if (count != null) {\n            options.count = count;\n        }\n        return new iterator.constructor(options);\n    };\n    iterator.nextAsync = function () {\n        return Promise.resolve(nextIteration(true)).then(function (state) {\n            if (!state.done) {\n                if (count == null || idx < count) {\n                    idx++;\n                }\n                else {\n                    state = { done: true };\n                }\n            }\n            return state;\n        });\n    };\n    iterator.next = function () {\n        if (!state.done) {\n            if (count == null || idx < count) {\n                nextIteration();\n                idx++;\n            }\n            else {\n                state = { done: true };\n            }\n        }\n        return state;\n    };\n    return iterator;\n}\nSqncIterator.prototype.toArray = function (count) {\n    count = count == null ? this.length : count;\n    if (count == null) {\n        throw Error(\"Can't cast to an Array: Infinite iterable\");\n    }\n    if (typeof Array.from === \"function\" && iteratorSupport) {\n        var iter = this.instance(count);\n        return Array.from(iter);\n    }\n    return iterableToArray(this.instance(count));\n};\n/**\n * @function\n * @name sqnc\n * @description Create sequence iterator with set of options\n * @param {SqncOptions} options - sequence options\n * @returns {SqncIterator} iterator\n */\n/**\n * @function\n * @name sqnc\n * @description Create {@link SqncIterator} that will return only one value for each iteration specified by {@link fill} param\n * @param {number|string} fill - value that will be returned by every iteration of iterator\n * @returns {SqncIterator} iterator\n */\n/**\n * @function\n * @name sqnc\n * @description Create sequence iterator with generation function\n * @param {SqncGenFunction} fn - sequence generation function\n * @param {number} [count] - limit iterations count\n * @returns {SqncIterator} iterator\n */\n/**\n * @function\n * @name sqnc\n * @description Create sequence iterator with range of values\n * @param {(number|string)} from - first value within iteration range\n * @param {(number|string)} to - value to limit iteration range\n * @param {number} [step=1] - step within iteration range\n * @param {number} [count] - limit iterations count\n * @returns {SqncIterator} iterator\n */\nfunction sqnc(arg0, arg1, arg2, arg3) {\n    return new SqncIterator(arg0, arg1, arg2, arg3);\n}\nsqnc.maxLength = UTF16MAX;\nsqnc.utils = {\n    inc: inc,\n    compare: compare,\n    delta: delta,\n    stringToUTF16Array: stringToUTF16Array,\n    utf16ArrayToString: utf16ArrayToString,\n    decToUTF16Array: decToUTF16Array,\n    utf16ArrayToDec: utf16ArrayToDec\n};\n/* istanbul ignore next */\nif (typeof process !== \"undefined\" && process.env.NODE_ENV === \"test\") {\n    sqnc.setIteratorSupport = function (val) {\n        if (val == null) {\n            iteratorSupport = typeof Symbol === \"function\" && \"iterator\" in Symbol;\n        }\n        else {\n            iteratorSupport = val;\n        }\n    };\n    sqnc.setAsyncIteratorSupport = function (val) {\n        if (val == null) {\n            asyncIteratorSupport = typeof Symbol === \"function\" && \"asyncIterator\" in Symbol;\n        }\n        else {\n            asyncIteratorSupport = val;\n        }\n    };\n}\nexports[\"default\"] = sqnc;\n/**\n * @typedef\n * @type {Object}\n * @name SqncIterator\n * @description Iterator created by {@link sqnc} function\n */\n/**\n * @method\n * @name SqncIterator#next\n * @description Do increment and return next state of iterator\n * @returns {IteratorState}\n */\n/**\n * @method\n * @name SqncIterator#instance\n * @description Create {@link SqncIterator} with the same {@link SqncOptions} as `source`\n * @param {number} [count] Limit count of iterations in constructed instance\n * @returns {SqncIterator}\n */\n/**\n * @method\n * @name SqncIterator#toArray\n * @description convert sequence to {@link Array}\n * @param {number} [count] Limit count of iterations in constructed array\n * @returns {Array.<*>}\n */\n/**\n * @typedef\n * @type {Object}\n * @name IteratorState\n * @description Object that describes current iterator state, check out {@link https://developer.mozilla.org/docs/Web/JavaScript/Reference/Iteration_protocols|Iterable protocol}\n * @property {boolean} done - is `true` if iterator is past the end of the iterated sequence.\n * @property {*} value - value returned by iterator for the current step\n */\n/**\n * @typedef\n * @type {Object}\n * @name SqncOptions\n * @description Options to instantiate sequence interator, one of its groups of params will be used,\n * by priority:\n * - {@link fill} - value to fill the sequence\n * - {@link fn}, {@link init} - function that generates sequence\n * - {@link from}, {@link to}, {@link step} - range in which seqence is generated\n * @property {*} fill -\n * @property {(number|string)} from - first value within iteration range\n * @property {(number|string)} [to] - value to limit iteration range\n * @property {number} [step=1] - step within iteration range\n * @property {SqncGenFunction} fn - function that generates sequence\n * @property {SqncGenInitFunction} init - function that will be called before first call of {@link fn} to initialize state object that will be shared between iterations\n * @property {number} count - limit iterations count\n */\n/**\n * @callback\n * @name SqncGenFunction\n * @description callback function that will be invoked for each iteration\n * @param {number} idx - index of current iteration\n * @param {Object} state - object to store state between iterations\n * @param {function} end - should be called to end sequence before {@link idx} reaches the limit\n * @returns {*} value of current iteration\n */\n/**\n * @callback\n * @name SqncGenInitFunction\n * @description initializes state object that will be shared between iterations\n * @returns {Object} object to store state between iterations\n */\n"],"names":["root","factory","exports","module","define","amd","self","__esModule","UTF16MAX","iteratorSupport","Symbol","asyncIteratorSupport","stringToUTF16Array","val","split","map","c","charCodeAt","utf16ArrayToString","String","fromCharCode","apply","utf16ArrayToDec","res","n","i","length","Math","pow","decToUTF16Array","p","unshift","floor","delta","a","b","Array","isArray","abs","compare","inc","count","SqncIterator","arg0","arg1","arg2","arg3","options","iterator","this","asyncIterator","next","nextAsync","from","fn","fill","to","step","init","chars","cloneOptions","opt","ceil","Object","defineProperty","get","nextIteration","idx","state","done","value","fnState_1","endCallback_1","isAsync","Promise","resolve","then","instance","constructor","sqnc","prototype","toArray","Error","iter","iterable","result","push","iterableToArray","maxLength","utils"],"sourceRoot":""}